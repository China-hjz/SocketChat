//#include <SocketChat.hpp>
//#define _WINSOCK_DEPRECATED_NO_WARNINGS
//#include <iostream>
//#include <winsock2.h>
//#include <ws2tcpip.h>
//#include <string>
//#pragma comment(lib, "ws2_32.lib")
//
//#define PORT 8888  // 固定端口
//#define BUF_SIZE 10000000
//
//SOCKET sock;
//bool running = true;
//
//// 接收线程
//DWORD WINAPI recvThread(LPVOID) {
//    char buf[BUF_SIZE];
//    sockaddr_in from;
//    int fromLen = sizeof(from);
//
//    while (running) {
//        int len = recvfrom(sock, buf, BUF_SIZE, 0, (sockaddr*)&from, &fromLen);
//        if (len > 0) {
//            buf[len] = '\0';
//            std::cout << "来自 " << inet_ntoa(from.sin_addr)
//                << ":" << ntohs(from.sin_port)
//                << " > " << buf << std::endl;
//        }
//    }
//    return 0;
//}
//
//int main() {
//    WSADATA ws;
//    WSAStartup(MAKEWORD(2, 2), &ws);
//
//    // 创建并绑定Socket
//    sock = socket(AF_INET, SOCK_DGRAM, 0);
//    sockaddr_in addr = { AF_INET, htons(PORT), INADDR_ANY };
//    bind(sock, (sockaddr*)&addr, sizeof(addr));
//
//    // 启动接收线程
//    CreateThread(0, 0, recvThread, 0, 0, 0);
//
//    // 发送循环
//    std::cout << "输入目标IP和消息（格式：IP 消息）\n";
//    while (true) {
//        std::cout << "> ";
//        std::string ip, msg;
//        std::cin >> ip;
//        if (ip == "exit") break;
//        std::getline(std::cin >> std::ws, msg);
//
//        sockaddr_in to = { AF_INET, htons(PORT) };
//        inet_pton(AF_INET, ip.c_str(), &to.sin_addr);
//        sendto(sock, msg.c_str(), msg.size(), 0, (sockaddr*)&to, sizeof(to));
//    }
//
//    running = false;
//    closesocket(sock);
//    WSACleanup();
//    return 0;
//}


//#define _WINSOCK_DEPRECATED_NO_WARNINGS
//#include <iostream>
//#include <fstream>
//#include <winsock2.h>
//#include <ws2tcpip.h>
//#pragma comment(lib, "ws2_32.lib")
//
//#define PORT 8888
//#define BUFFER_SIZE 1024  // 每个数据块大小
//#define HEADER_SIZE 4     // 序号头大小
//
//// 文件传输包头结构
//struct PacketHeader {
//    unsigned int seqNumber; // 数据包序号
//};
//
//SOCKET sock;
//bool running = true;
//
//// 接收线程
//DWORD WINAPI recvThread(LPVOID) {
//    char buffer[BUFFER_SIZE + HEADER_SIZE];
//    sockaddr_in from;
//    int fromLen = sizeof(from);
//    std::ofstream outFile("received_file", std::ios::binary);
//
//    while (running) {
//        int len = recvfrom(sock, buffer, BUFFER_SIZE + HEADER_SIZE, 0, (sockaddr*)&from, &fromLen);
//        if (len > HEADER_SIZE) {
//            PacketHeader header;
//            memcpy(&header, buffer, HEADER_SIZE);
//
//            // 写入文件（实际应校验序号）
//            outFile.write(buffer + HEADER_SIZE, len - HEADER_SIZE);
//            std::cout << "接收包 #" << header.seqNumber << std::endl;
//        }
//    }
//    outFile.close();
//    return 0;
//}
//
//// 发送文件
//void sendFile(const std::string& filename, const std::string& ip) {
//    std::ifstream file(filename, std::ios::binary | std::ios::ate);
//    if (!file) {
//        std::cerr << "无法打开文件" << std::endl;
//        return;
//    }
//
//    sockaddr_in to = { AF_INET, htons(PORT) };
//    inet_pton(AF_INET, ip.c_str(), &to.sin_addr);
//
//    // 获取文件大小
//    int fileSize = file.tellg();
//    file.seekg(0);
//
//    char buffer[BUFFER_SIZE + HEADER_SIZE];
//    unsigned int seq = 0;
//
//    while (!file.eof()) {
//        PacketHeader header;
//        header.seqNumber = seq++;
//
//        // 构造数据包
//        memcpy(buffer, &header, HEADER_SIZE);
//        file.read(buffer + HEADER_SIZE, BUFFER_SIZE);
//
//        // 发送数据包
//        sendto(sock, buffer, HEADER_SIZE + file.gcount(), 0, (sockaddr*)&to, sizeof(to));
//        std::cout << "发送包 #" << seq << std::endl;
//    }
//
//    file.close();
//}
//
//int main() {
//    WSADATA ws;
//    WSAStartup(MAKEWORD(2, 2), &ws);
//
//    // 创建Socket
//    sock = socket(AF_INET, SOCK_DGRAM, 0);
//    sockaddr_in addr = { AF_INET, htons(PORT), INADDR_ANY };
//    bind(sock, (sockaddr*)&addr, sizeof(addr));
//
//    CreateThread(0, 0, recvThread, 0, 0, 0);
//
//    std::cout << "1. 发送文件\n2. 接收文件\n选择模式: ";
//    int mode;
//    std::cin >> mode;
//
//    if (mode == 1) {
//        std::string ip, file;
//        std::cout << "目标IP: ";
//        std::cin >> ip;
//        std::cout << "文件路径: ";
//        std::cin >> file;
//        sendFile(file, ip);
//    }
//
//    running = false;
//    closesocket(sock);
//    WSACleanup();
//    return 0;
//}