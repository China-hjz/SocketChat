//#include <SocketChat.hpp>
//#define _WINSOCK_DEPRECATED_NO_WARNINGS
//#include <iostream>
//#include <winsock2.h>
//#include <ws2tcpip.h>
//#include <string>
//#pragma comment(lib, "ws2_32.lib")
//
//#define PORT 8888  // 固定端口
//#define BUF_SIZE 10000000
//
//SOCKET sock;
//bool running = true;
//
//// 接收线程
//DWORD WINAPI recvThread(LPVOID) {
//    char buf[BUF_SIZE];
//    sockaddr_in from;
//    int fromLen = sizeof(from);
//
//    while (running) {
//        int len = recvfrom(sock, buf, BUF_SIZE, 0, (sockaddr*)&from, &fromLen);
//        if (len > 0) {
//            buf[len] = '\0';
//            std::cout << "来自 " << inet_ntoa(from.sin_addr)
//                << ":" << ntohs(from.sin_port)
//                << " > " << buf << std::endl;
//        }
//    }
//    return 0;
//}
//
//int main() {
//    WSADATA ws;
//    WSAStartup(MAKEWORD(2, 2), &ws);
//
//    // 创建并绑定Socket
//    sock = socket(AF_INET, SOCK_DGRAM, 0);
//    sockaddr_in addr = { AF_INET, htons(PORT), INADDR_ANY };
//    bind(sock, (sockaddr*)&addr, sizeof(addr));
//
//    // 启动接收线程
//    CreateThread(0, 0, recvThread, 0, 0, 0);
//
//    // 发送循环
//    std::cout << "输入目标IP和消息（格式：IP 消息）\n";
//    while (true) {
//        std::cout << "> ";
//        std::string ip, msg;
//        std::cin >> ip;
//        if (ip == "exit") break;
//        std::getline(std::cin >> std::ws, msg);
//
//        sockaddr_in to = { AF_INET, htons(PORT) };
//        inet_pton(AF_INET, ip.c_str(), &to.sin_addr);
//        sendto(sock, msg.c_str(), msg.size(), 0, (sockaddr*)&to, sizeof(to));
//    }
//
//    running = false;
//    closesocket(sock);
//    WSACleanup();
//    return 0;
//}


//#define _WINSOCK_DEPRECATED_NO_WARNINGS
//#include <iostream>
//#include <fstream>
//#include <winsock2.h>
//#include <ws2tcpip.h>
//#pragma comment(lib, "ws2_32.lib")
//
//#define PORT 8888
//#define BUFFER_SIZE 1024  // 每个数据块大小
//#define HEADER_SIZE 4     // 序号头大小
//
//// 文件传输包头结构
//struct PacketHeader {
//    unsigned int seqNumber; // 数据包序号
//};
//
//SOCKET sock;
//bool running = true;
//
//// 接收线程
//DWORD WINAPI recvThread(LPVOID) {
//    char buffer[BUFFER_SIZE + HEADER_SIZE];
//    sockaddr_in from;
//    int fromLen = sizeof(from);
//    std::ofstream outFile("received_file", std::ios::binary);
//
//    while (running) {
//        int len = recvfrom(sock, buffer, BUFFER_SIZE + HEADER_SIZE, 0, (sockaddr*)&from, &fromLen);
//        if (len > HEADER_SIZE) {
//            PacketHeader header;
//            memcpy(&header, buffer, HEADER_SIZE);
//
//            // 写入文件（实际应校验序号）
//            outFile.write(buffer + HEADER_SIZE, len - HEADER_SIZE);
//            std::cout << "接收包 #" << header.seqNumber << std::endl;
//        }
//    }
//    outFile.close();
//    return 0;
//}
//
//// 发送文件
//void sendFile(const std::string& filename, const std::string& ip) {
//    std::ifstream file(filename, std::ios::binary | std::ios::ate);
//    if (!file) {
//        std::cerr << "无法打开文件" << std::endl;
//        return;
//    }
//
//    sockaddr_in to = { AF_INET, htons(PORT) };
//    inet_pton(AF_INET, ip.c_str(), &to.sin_addr);
//
//    // 获取文件大小
//    int fileSize = file.tellg();
//    file.seekg(0);
//
//    char buffer[BUFFER_SIZE + HEADER_SIZE];
//    unsigned int seq = 0;
//
//    while (!file.eof()) {
//        PacketHeader header;
//        header.seqNumber = seq++;
//
//        // 构造数据包
//        memcpy(buffer, &header, HEADER_SIZE);
//        file.read(buffer + HEADER_SIZE, BUFFER_SIZE);
//
//        // 发送数据包
//        sendto(sock, buffer, HEADER_SIZE + file.gcount(), 0, (sockaddr*)&to, sizeof(to));
//        std::cout << "发送包 #" << seq << std::endl;
//    }
//
//    file.close();
//}
//
//int main() {
//    WSADATA ws;
//    WSAStartup(MAKEWORD(2, 2), &ws);
//
//    // 创建Socket
//    sock = socket(AF_INET, SOCK_DGRAM, 0);
//    sockaddr_in addr = { AF_INET, htons(PORT), INADDR_ANY };
//    bind(sock, (sockaddr*)&addr, sizeof(addr));
//
//    CreateThread(0, 0, recvThread, 0, 0, 0);
//
//    std::cout << "1. 发送文件\n2. 接收文件\n选择模式: ";
//    int mode;
//    std::cin >> mode;
//
//    if (mode == 1) {
//        std::string ip, file;
//        std::cout << "目标IP: ";
//        std::cin >> ip;
//        std::cout << "文件路径: ";
//        std::cin >> file;
//        sendFile(file, ip);
//    }
//
//    running = false;
//    closesocket(sock);
//    WSACleanup();
//    return 0;
//}

#include <iostream>
#include <fstream>
#include <thread>
#include <atomic>
#include <string>
#include <vector>
#include <map>
#include <winsock2.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")

#define PORT 8888
#define BUFFER_SIZE 1024
#define CONTACTS_FILE "contacts.dat"
#define CHATLOG_DIR "chatlogs"

// 协议类型定义
enum class MainPacketType : int { ChatMessage = 0, FileTransfer = 1 };
enum class FileSubType : int { Start = 1, DataPacket = 2, TransferEnd = 3 };

#pragma pack(push, 1)
struct PacketHeader {
    MainPacketType mainType;
    FileSubType subType;
    uint32_t seqNumber;
    uint16_t dataSize;
    char senderName[32];
};
#pragma pack(pop)

SOCKET sock;
std::atomic<bool> running(true);
std::string myNickname;
std::map<std::string, std::string> contacts; // IP -> Nickname
std::string currentChatIP;

// 文件操作辅助函数
void CreateDirectoryIfNotExists(const char* path) {
    if (!CreateDirectoryA(path, NULL) {
        if (GetLastError() != ERROR_ALREADY_EXISTS)
            std::cerr << "无法创建目录: " << path << std::endl;
    }
}

void SaveChatLog(const std::string& ip, const std::string& message) {
    CreateDirectoryIfNotExists(CHATLOG_DIR);
    std::ofstream logFile(CHATLOG_DIR + ("\\" + ip + ".log"), std::ios::app);
    if (logFile) {
        logFile << message << std::endl;
    }
}

void LoadContacts() {
    std::ifstream file(CONTACTS_FILE);
    std::string ip, name;
    while (file >> ip >> name) {
        contacts[ip] = name;
    }
}

void SaveContacts() {
    std::ofstream file(CONTACTS_FILE);
    for (const auto& [ip, name] : contacts) {
        file << ip << " " << name << std::endl;
    }
}

// 网络功能
void InitializeNetwork() {
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    int reuse = 1;
    setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (char*)&reuse, sizeof(reuse));

    sockaddr_in localAddr{ AF_INET, htons(PORT), INADDR_ANY };
    bind(sock, (sockaddr*)&localAddr, sizeof(localAddr));
}

DWORD WINAPI ReceiveThread(LPVOID) {
    char buffer[BUFFER_SIZE + sizeof(PacketHeader)];
    sockaddr_in fromAddr;
    int addrLen = sizeof(fromAddr);

    while (running) {
        int len = recvfrom(sock, buffer, sizeof(buffer), 0, (sockaddr*)&fromAddr, &addrLen);
        if (len <= 0) continue;

        PacketHeader header;
        memcpy(&header, buffer, sizeof(header));

        char ipStr[INET_ADDRSTRLEN];
        inet_ntop(AF_INET, &fromAddr.sin_addr, ipStr, INET_ADDRSTRLEN);

        std::string message(buffer + sizeof(header), header.dataSize);
        std::string logEntry = "[" + std::string(header.senderName) + "]: " + message;

        if (header.mainType == MainPacketType::ChatMessage) {
            std::cout << "\n" << logEntry << std::endl;
            SaveChatLog(ipStr, logEntry);
        }
    }
    return 0;
}

void SendMessage(const std::string& message, const std::string& targetIP) {
    sockaddr_in destAddr{ AF_INET, htons(PORT) };
    InetPtonA(AF_INET, targetIP.c_str(), &destAddr.sin_addr);

    PacketHeader header{};
    header.mainType = MainPacketType::ChatMessage;
    header.dataSize = static_cast<uint16_t>(message.size());
    strncpy_s(header.senderName, myNickname.c_str(), sizeof(header.senderName));

    std::vector<char> packet(sizeof(header) + message.size());
    memcpy(packet.data(), &header, sizeof(header));
    memcpy(packet.data() + sizeof(header), message.c_str(), message.size());

    sendto(sock, packet.data(), static_cast<int>(packet.size()), 0, 
          (sockaddr*)&destAddr, sizeof(destAddr));
}

// 用户界面
void ShowMainMenu() {
    system("cls");
    std::cout << "===== 聊天助手 (" << myNickname << ") =====" << std::endl;
    std::cout << "1. 选择联系人\n2. 添加新联系人\n3. 设置昵称\n4. 退出\n选择: ";
}

void ShowChatWindow() {
    system("cls");
    std::cout << "===== 与 " << contacts[currentChatIP] << " 的对话 =====" << std::endl;
    
    // 显示聊天记录
    std::ifstream logFile(CHATLOG_DIR + ("\\" + currentChatIP + ".log"));
    std::string line;
    while (std::getline(logFile, line)) {
        std::cout << line << std::endl;
    }
    std::cout << "\n输入消息（输入 /exit 返回主菜单）:\n> ";
}

void AddContact() {
    std::string ip, name;
    std::cout << "输入IP地址: ";
    std::cin >> ip;
    std::cout << "输入联系人名称: ";
    std::cin >> name;
    contacts[ip] = name;
    SaveContacts();
}

void SetNickname() {
    std::cout << "输入你的昵称: ";
    std::cin >> myNickname;
}

void ChatLoop() {
    ShowChatWindow();
    std::string message;
    while (true) {
        std::getline(std::cin, message);
        if (message == "/exit") break;
        if (!message.empty()) {
            SendMessage(message, currentChatIP);
            SaveChatLog(currentChatIP, "[" + myNickname + "]: " + message);
        }
        ShowChatWindow();
    }
}

int main() {
    LoadContacts();
    InitializeNetwork();
    CreateThread(nullptr, 0, ReceiveThread, nullptr, 0, nullptr);

    if (myNickname.empty()) SetNickname();

    while (true) {
        ShowMainMenu();
        int choice;
        std::cin >> choice;
        std::cin.ignore();

        switch (choice) {
        case 1: {
            int index = 1;
            std::vector<std::string> ipList;
            std::cout << "\n联系人列表:\n";
            for (const auto& [ip, name] : contacts) {
                std::cout << index++ << ". " << name << " (" << ip << ")\n";
                ipList.push_back(ip);
            }
            if (ipList.empty()) {
                std::cout << "暂无联系人，请先添加！\n";
                break;
            }
            std::cout << "选择联系人编号: ";
            int select;
            std::cin >> select;
            if (select > 0 && select <= ipList.size()) {
                currentChatIP = ipList[select - 1];
                ChatLoop();
            }
            break;
        }
        case 2:
            AddContact();
            break;
        case 3:
            SetNickname();
            break;
        case 4:
            running = false;
            closesocket(sock);
            WSACleanup();
            return 0;
        }
    }
}